CREATE TABLE temp_03T (
	no INT NOT NULL auto_increment PRIMARY KEY ,
	data VARCHAR(20) NULL 
);

INSERT INTO temp_03T VALUES ( default, '애플' );
INSERT INTO temp_03T VALUES ( default, '애플' );
INSERT INTO temp_03T VALUES ( default, '애플' );

SELECT * FROM temp_03T;

+----+--------+
| no | data   |
+----+--------+
|  1 | 애플   |
|  2 | 애플   |
|  3 | 애플   |
+----+--------+
3 rows in set (0.00 sec)

auto_increment PRIMARY KEY : 자동 일련번호 지정
-- 입력시에 default 를 이용합니다. 

DELETE FROM temp_03T WHERE no = 2;
SELECT * FROM temp_03T;

-- 부여된 일련번호중에 도중에 삭제되는 레코드가 생겨도
   비어있는 번호를 채우는 일을 벌어지지 않는다.
   
auto_increment : 자동증가 일련번호    
PRIMARY KEY ?
NOT NULL vs NULL ?

INSERT INTO temp_03T VALUES ( default, NULL );
-- 'NULL' 주의 ( NULL / "NULL" )

SELECT * FROM temp_03T WHERE data = NULL; (X)
SELECT * FROM temp_03T WHERE data IS NULL; (0)
-- NULL 과 비교하는 경우에는 = 아닌 IS 를 쓴다.

INSERT INTO temp_03T VALUES ( NULL, NULL );
-- 원래는 에러나는 경우임 ( 버젼에 따라 틀림 )

CREATE TABLE temp_04T (
	data VARCHAR(20) NOT NULL,
	data2 VARCHAR(20) NULL
);

INSERT INTO temp_04T VALUES ('애플','애플');
INSERT INTO temp_04T VALUES ('애플',NULL); -- OK
INSERT INTO temp_04T VALUES (NULL,'애플'); -- 에러

NOT NULL 로 지정된 필드는 입력시 NULL 값을 허용 안함

주소록을 테이블로 만든다고 가정하면??
- 일련번호 NOT NULL
- 이름 NOT NULL
- (집)전화번호 NULL
- (손)전화번호 NOT NULL
- 주소 NULL
- 생년월일 NULL

테이블 설계시에 반드시 있어야 하는 정보와 
생략가능한 정보는 존재하고, 그것을 지정할 때 
NULL 또는 NOT NULL 을 사용한다. 


PRIMARY KEY ?? 

개념적 의미는? "레코드와 레코드를 구분하는 기준이 
되는 필드를 PK ( Primary Key ) 라고 한다"

예를들어
	- 일련번호
	- 주민번호
	- 학번
	- 군번
	- ISBN 
	( 이름, 제목 등을 PK 로 쓰지 않는 이유 ? )
	
PK 이 가져야 하는 세가지 특성? 성질?
1. NOT NULL -- 생략불가	
2. NO DUPLICATED -- 중복불가 ( 절대 겹쳐서는 안된다 )
   "레코드를 구분할 수 없어진다"
3. NO CHANGE -- 변경불가 ( 이건 필수아님 / 강력추천 )   
   "주민번호를 변경하면 그것을 가지고 했던 모든 기록을
    다 재 점검하고 수정해야 한다"
( NN , ND , NC )	


FOREIGN KEY ( 외래키? ) - FK
"다른 테이블에서 지정된 PK를 내 쪽에서 참조하여 사용하는 필드"
( 실은 내 테이블의 PK도 FK로 참조할 수 있다 )

-- 인터넷 게시판
회원
- 회원번호, 아이디, 닉네임 ... : 강사의 선택은 ID

게시글
- 글 번호
  ( 글을 수정 , 추천 , 삭제할때의 기준?? )
  
"PK를 가지고 있다는 것은 그 PK를 중심으로 
 하나의 테이블을 구성하고 있는 경우가 대부분이 된다"
 : 엔티티 ( Entity ) 라고 한다.
 
Entity 의 개념
1. 추상명사에 해당한다
2. 단일한 성격의 PK 를 가지고 있고
3. 2개 이상의 속성으로 표현되어야 한다.
> "이런 것들은 독립된 테이블로 구성한다." 

DB 설계할때 제일먼저 하는 일은 ? 업무파악과 그 흐름에 따른 소설? 시나리오? 을 쓰는 것

'A 씨는 은행원인데 고객 B 에게게 통장개설을 의뢰받고
이런 저런 서류를 요청하고 , 이런 저런 정보를 시스템에 입력하여 은행으로 부터 심사를 기다리고 ... 주저리 주저리' - 이게 빠지면 시스템에 반영이 안된다. 대형사고

-- 개발에 있어서 프로그래밍 천재보다 업무전문가가 더 높은 평가를 받을 수 밖에 없다.
   
-- 테이블 설계시 업무 시나리오에 나오는 '추상명사'에 주목해야 한다.
-- 추상명사는 구체적인 대상을 '대표'하는 성질을 가지고 있다. 

( 예를 들어 고길동 홍길동 김순자가 은행원이다 라고 한다면 은행원은 이들을 대표하는 추상명사가 된다 )

( 통장... 이라는 단어는 시스템에서 추상명사인가?
  이통장 저통장 ... 모두를 대표하는 용어가 통장이다 )
  
-- 실제로 DB 설계를 해 보면 설계 이론보다 훨씬 더 중요한게 추상명사를 뽑아내는 능력이더라 ... 

-- 추상명사를 뽑았다? 그러면 PK 가 있느냐를 봐야 한다.
   그것도 단일한 성격의 PK  ( 하나의 필드로 표현되는 )
   
   은행원 ? 사번
   계좌 ? 계좌번호
   
   ... 이것들은 아주 유력한 엔티티 후보가 된다.
   
-- 인터넷 상의 게시판을 생각해 보자...

엔티티 후보 ( 1 추상명사 2 PK ) : 아래에서 * 는 PK

회원
- ID*
- 비밀번호
- 닉네임
- 전화번호

게시글   
- 글번호*
- 제목
- 내용
- 올린시간
- 추천수

"PK 이외의 다른 데이터가 있는지 살펴봐야 한다 - 속성 - 엔티티에 종속되어 엔티티를 표현하는"
"속성은 필드와 같은 얘긴가요? 맞음. 단 속성은 개념적인 용어이고 필드는 물리적인 용어"

-- 2개 이상( PK를 포함해서 ) 의 속성이 존재하므로 엔티티로 확정 !! => 독립된 테이블로 구성한다.


------------------------------------------------------------------------------------------------------

"엔티티를 파악한 뒤에는
 각 엔티티들 가운데에서 '기록할 만한 가치가 있는 동사' 가 존재하는지를 파악해야 한다"
 
 회원은 게시글을 ... 한다 : 작성한다!! -- 1번글은 누가 쓴거야??? - 가치가 있다.
 작성 수정 삭제 ... 를 통털어서 CURD 라고 한다 ( Create Update Read Delete ) -- CRUD CURD ... 
 -- 일반적인 수정 생성 삭제의 동사는 하나로 취급하는 경향이 많다.
 
 추천한다!! -- 회원이 글을 추천한 기록은 남길 필요가 있다!! -- 한 사람이 하나의 글을 한번만 추천가능
 
 이러한 기록할 만한 가치가 있는 동사가 존재할때 , 이를 '관계 ( Relation )' 라고 하고, 마름모로 표현한다.
 
 -- 데이터베이스를 이야기 할때 R-DB ( 관계형 데이터베이스 ) 라고 하는 것이 여기서 왔다.
    아직까지도 이걸 넘어서는 데이터베이스 형태는 나오지 않는다 ( OODB - 객체지향 DB ... 엎지는 못한다 )
	
	
	"관계파악에서 매우 매우 매우 매우 중요한것이 이것이 일대일 / 일대다 / 다대다 중에 어느거냐???"
	
	1. 일대일 관계 : 이건 Be 동사에 해당하는 경우. ( 쫌 어렵다 ) -- 당분간 보류
	
	2. 일대다 관계 
		하나의 회원은 여러개의 게시글을 작성한다 ( O )
		하나의 게시글은 여러 회원에 의해서 작성된다 ( X )
		하나의 게시글은 하나의 회원에 의해서 작성된다 ( O )
		
		"물리적으로 구현시 다 쪽에서 1 쪽의 PK 를 FK로 참조하는 형태로 구현한다."
		
	3. 다대다 관계
		하나의 회원은 여러 게시글을 추천한다 ( O )
		하나의 게시글은 여러 회원에 의해 추천된다 ( O ) 
		
		"물리적으로 구현시 양쪽의 PK 를 조합한 필드를 PK로 갖는 새로운 테이블을 만들어서 구현한다."
		
	E-R 다이어그램에서는 관계에서 일대일 , 일대다 형태를 그림과 같이 명시한다.
	
	E-R 다이어그램은 지금 화면의 그림처럼 그려지는 것도 E-R 다이어그램이라 하고
	지금부터 그리는 물리적으로 구현 되기에 적합한 그림도 E-R 다이어그램이라 한다.
	
	-- 우리가 분석하고 그린 다이어그램에 의거하여 물리적인 테이블을 생성했음 
	
CREATE TABLE User_FT (
	uid VARCHAR(10) NOT NULL,
	pwd VARCHAR(10) NOT NULL,
	nick_name VARCHAR(10) NULL,
	phone     VARCHAR(10) NULL
);
 
CREATE TABLE Text_FT (
	no INT NOT NULL AUTO_INCREMENT PRIMARY KEY ,
	title VARCHAR(10) NOT NULL,
	content VARCHAR(10) NOT NULL,
	recom INT NOT NULL,
	uid VARCHAR(10) NOT NULL
); 

CREATE TABLE Recom_FT (
	uid VARCHAR(10) NOT NULL,
	no INT NOT NULL
);

	-- PK , FK 지정은 뒤에 Constraint 개념을 배울 때 하게 되고 , 실전에서도 처음에는 저렇게 만들고
	   나중에 Constraint 를 추가하는 경우가 일반적이다. 왜냐?? 겪어보면 알아요 ㅎㅎ


INSERT INTO User_FT VALUES ('apple','1234','사과',NULL);
SELECT * FROM User_FT;
+-------+------+-----------+-------+
| uid   | pwd  | nick_name | phone |
+-------+------+-----------+-------+
| apple | 1234 | 사과      | NULL  |
| kiwi  | 4321 | 키위      | 4321  |
+-------+------+-----------+-------+

INSERT INTO User_FT VALUES ('kiwi','4321','키위','4321');

[ apple 이 글을 쓴다 ]
INSERT INTO Text_FT VALUES ( default, '제목','내용',0,'apple');
[ kiwi 이 글을 쓴다 ]
INSERT INTO Text_FT VALUES ( default, '제목2','내용2',0,'kiwi');

SELECT * FROM Text_FT;
+----+---------+---------+-------+-------+
| no | title   | content | recom | uid   |
+----+---------+---------+-------+-------+
|  1 | 제목    | 내용    |     0 | apple |
|  2 | 제목2   | 내용2   |     0 | kiwi  |
+----+---------+---------+-------+-------+

INSERT INTO Text_FT VALUES ( default, '제목X','내용X',0,'mango');

+----+---------+---------+-------+-------+
| no | title   | content | recom | uid   |
+----+---------+---------+-------+-------+
|  1 | 제목    | 내용    |     0 | apple |
|  2 | 제목2   | 내용2   |     0 | kiwi  |
|  3 | 제목X   | 내용X   |     0 | mango | <- 올바른 레코드일까??
+----+---------+---------+-------+-------+
mango 라는 유저가 없는데 그런 유저는 글을 쓰면 안된다!!!

FK 정의 : 다른 테이블의 PK를 내 쪽에서 참조해서 쓰는 것!!

- User_FT의 apple 과  Text_FT 에서 쓰인 apple 은 동일개념이다.
  이것이 참조해서 사용한다!! 라는 개념이 된다. ( 상관 없지 않다. 우연히 같은게 아니다 )
  
- "FK 쪽에서는 PK 에 존재하지 않는 데이터가 존재해서는 안된다. ( mango ) 
  이를 참조 무결성 ( Referencial Integrity ) 라고 한다."  
  따라서 3번 레코드는 존재해서는 안된다. 
  
................................

DELETE FROM User_FT WHERE uid = 'apple'; 	-- 회원탈퇴
+------+------+-----------+-------+
| uid  | pwd  | nick_name | phone |
+------+------+-----------+-------+
| kiwi | 4321 | 키위      | 4321  |
+------+------+-----------+-------+

+----+---------+---------+-------+-------+
| no | title   | content | recom | uid   |
+----+---------+---------+-------+-------+
|  1 | 제목    | 내용    |     0 | apple | <- 참조무결성 위반??
PK 쪽의 데이터를 지우려고 한다면
FK 쪽의 데이터를 먼저 지우고 난 다음에 PK 쪽의 데이터를 지우는게 순서

"아니 탈퇴한다고 해서 쓴 글을 다 지워버리는게 맞나??"
-- 이런 걸 흔히 비즈니스로직 이라고 한다. 업무논리. 
   해당 데이터베이스를 운용하는 사람이 정하는 논리들을 통칭한다.
   
이런경우는 활성화 필드를 따로 두어서 Y 면 현재 활동중인 회원
  N 이면 탈퇴회원 ... 이런 식으로 표기하면 된다. 
+-------+------+-----------+-------+---+
| uid*  | pwd  | nick_name | phone |   |
+-------+------+-----------+-------+---+
| apple | 1234 | 사과      | NULL  | N | <- 이렇게 하면 게시글 안 지워도 된다.
| kiwi  | 4321 | 키위      | 4321  | Y | 
+-------+------+-----------+-------+---+

User_FT 구조를 변경할 필요가 있음!!

ALTER TABLE User_FT ADD active CHAR(1);
+------+------+-----------+-------+--------+
| uid  | pwd  | nick_name | phone | active |
+------+------+-----------+-------+--------+
| kiwi | 4321 | 키위      | 4321  |  NULL  |
+------+------+-----------+-------+--------+

'ALTER TABLE 을 이용하여 필드를 추가할 수는 있는데 NOT NULL 컬럼은 추가 불가함'
-- 만일 NOT NULL 로 지정되었다면 active 필드에 데이터가 와야한다. 헌데 뭐로??

"차라리 삭제하고 다시 만드는게 싸게 먹히더라"

ALTER TABLE User_FT DROP active;
-- active 컬럼을 삭제하였음

ALTER TABLE User_FT CHANGE pwd passwd CHAR(4);
-- pwd 컬럼의 이름을 passwd 로 변경, 같이 자료형도 CHAR(4)로 변경

ALTER TABLE User_FT MODIFY phone CHAR(4);
-- phone 필드의 자료형을 VARCHAR(20) 에서 CHAR(4) 로 변경

ALTER TABLE User_FT RENAME User_GT;
-- User_FT 테이블 이름을 User_GT 로 바꿈

....................................................................

DROP TABLE User_FT;

CREATE TABLE User_FT (
	uid VARCHAR(10) NOT NULL,
	pwd VARCHAR(10) NOT NULL,
	nick_name VARCHAR(10) NULL,
	phone     VARCHAR(10) NULL,
	active    CHAR(1) NOT NULL
);

-- 과연 FK에 관련된 물리적인 제약이 있었다면 지울 수 있었을까??
   즉 Text_FT 가 있고, 거기에 데이터가 있다면
   User_FT는 함부로 지울 수 없도록 제약이 강하게 걸려 있을 수 있지 않나??
   
   -- 현재로는 아무런 제약을 걸지 않았기에 지울 수 있었다
   
   -- 아직 테이블 설계가 완성되지 않은 상황에서 
      각종 이런 저런 제약조건을 다 걸고서 시작하는 것 보다는
	  시작할 때는 아무런 제약조건을 걸지 않고서 시작하는 것이 낫다.

    ( 당장에 Text_FT 를 그냥 두고 User_FT를 삭제하고 다시 만들 수 있었다 )

+-------+------+-----------+-------+-------+
| uid   | pwd  | nick_name | phone | active| 
+-------+------+-----------+-------+-------+
| apple | 1234 | 사과      | NULL  |   Y   | 
| kiwi  | 4321 | 키위      | 4321  |   Y   | 
+-------+------+-----------+-------+-------+

INSERT INTO User_FT VALUES ('apple','1234','사과',NULL,'Y');
INSERT INTO User_FT VALUES ('kiwi' ,'4321','키위','4321','Y');

Q. apple 이 2번 글을 추천했다?

INSERT INTO Recom_FT VALUES ('apple', 2 );
UPDATE Text_FT SET recom = recom + 1 WHERE no = 2;
-- 2개의 문장으로 업무논리가 성립된다.

INSERT INTO Recom_FT VALUES ('apple', 2 );  <- 다시 들어가는 거 막아야함??
INSERT INTO Recom_FT VALUES ('apple', 1 );  <- 이건 막지 않는다.
INSERT INTO Recom_FT VALUES ('kiwi', 2 );

즉 Recom_FT 에서는 uid 와 no 가 결합해서 중복을 허용하지 않는 논리가 적용되어아 한다.
PK 조건중에 중복되어서는 안된다... 라는 개념 있다?? ( NN , ND , NC )

"다대다 대응을 물리적으로 구현하려면
 양쪽의 PK 를 결합한 필드를 PK로 하는 테이블을 새로 만들어서 구현한다."
 -- uid 와 no 는 쌍으로 하여 절대 겹치지 않도록 데이터가 들어가면 된다.
 -- 두개의 필드가 결합하여 PK를 이룬다는 것의 의미
 
Q. apple 이 탈퇴를 했다.
UPDATE User_FT SET active = 'N' WHERE uid = 'apple';

-- 뻔한 문장이긴 하지만 이것들을 상황과 업무논리에 맞게 SQL 문장을 만드는 것도
   쉬운 일이 아니더라 ... 
   
-- 설계에 관련된 지식과 경험이 없이 SQL 문장을 배운 사람들의 경우
   설계가 대체로 테이블 하나에 다 몰아 넣어 만드는 경향이 있더라 ... ( 강사경험 )
   테이블은 아래위로 늘고 주는게 정상인데 , 이게 좌우로 늘고 줄더라 ...    

---------------------------------------------------------------------------------------------

CREATE TABLE StudentT(
	stId VARCHAR(5),
	name VARCHAR(9),
	addr VARCHAR(9)
);

INSERT INTO StudentT VALUES('10101','홍길동','역삼동');
INSERT INTO StudentT VALUES('10102','고길동','개포동');
INSERT INTO StudentT VALUES('10103','이기자','역삼동');
INSERT INTO StudentT VALUES('10104','박기자','한남동');
INSERT INTO StudentT VALUES('10105','김영삼','홍제동');
INSERT INTO StudentT VALUES('10106','김대중','한남동');

CREATE TABLE SubjectT(
	subId   VARCHAR(4), 
	name    VARCHAR(9),
	gajung	INT
);

INSERT INTO SubjectT VALUES ('KOR1','국어1',3);
INSERT INTO SubjectT VALUES ('ENG1','영어1',2);
INSERT INTO SubjectT VALUES ('MAT1','수학1',3);

CREATE TABLE ScoreT(
	stId  VARCHAR(5),
	subId VARCHAR(4), 
	score INT
);

INSERT INTO ScoreT VALUES('10101','KOR1',60);
INSERT INTO ScoreT VALUES('10101','ENG1',80);
INSERT INTO ScoreT VALUES('10101','MAT1',90);

INSERT INTO ScoreT VALUES('10102','KOR1',90);
INSERT INTO ScoreT VALUES('10102','MAT1',90);
INSERT INTO ScoreT VALUES('10102','ENG1',100);

INSERT INTO ScoreT VALUES('10103','KOR1',70);
INSERT INTO ScoreT VALUES('10103','ENG1',90);
INSERT INTO ScoreT VALUES('10103','MAT1',70);

INSERT INTO ScoreT VALUES('10104','KOR1',80);
INSERT INTO ScoreT VALUES('10104','ENG1',70);
INSERT INTO ScoreT VALUES('10104','MAT1',70);

INSERT INTO ScoreT VALUES('10105','KOR1',50);
INSERT INTO ScoreT VALUES('10105','ENG1',60);
INSERT INTO ScoreT VALUES('10105','MAT1',80);

INSERT INTO ScoreT VALUES('10106','KOR1',60);
INSERT INTO ScoreT VALUES('10106','ENG1',80);
INSERT INTO ScoreT VALUES('10106','MAT1',60);

---------------------------------------------------------------------------------------------

이에 대한 역설계!!!

추상명사 & PK & 2개 속성 ... 

학생
- 추상명사 & stId & 이름 주소 -> 확실히 맞음

과목
- 추상명사 & subId & 이름 가중치 -> 확실히 맞음

성적
- stId , subId 를 참조해서 쓰고 있고 , 양쪽의 PK 를 결합하여 PK 를 쓰고 있고 -> 관계 ( 다대다 )
- 기록할만한 가치가 있는 동사가 존재하나? 학생은 과목을 ... 한다?? 수강한다!!!

  한 학생은 여러 과목을 수강한다 ( O )
  한 과목은 여러 학생에 의해 수강된다 ( O ) 
  
  "속성은 반드시 일대일로 매핑되도록 배치되어야 한다."
   학생 - 학번 - 이름 - 주소 
   과목 - 이름 - 코드 - 가중치
   
   학생과 성적??? - 일대일 아님
   과목과 성적??? - 일대일 아님
   
   ( 학번 + 과목코드 ) 이것과 성적은 일대일 매핑되나?? -- 된다!!!
   따라서 성적 속성은 수강이라는 관계에 붙는게 맞다.
   
......................................................................................

분산된 설계 아래에서의 데이터 운용 ... 서브쿼리와 조인에 있다.

Q. 역삼동에 사는 학생은 누구누구??

SELECT * FROM StudentT WHERE addr LIKE '%역삼%';

SELECT stId FROM StudentT WHERE addr LIKE '%역삼%';
-- 특정 필드만 볼 수 있다.

SELECT stId + 20 FROM StudentT WHERE addr LIKE '%역삼%';
-- 들어있는 데이터를 가공한 결과를 볼 수도 있다.

SELECT stId + 20 AS abcd FROM StudentT 
WHERE addr LIKE '%역삼%';
-- 필드명을 다르게 볼 수 있다.
   
SELECT stId + 1234 FROM StudentT; 
-- 데이터는 보유하면서 보여지기 직전에 더해서 보여준 것.

SELECT stId, name FROM StudentT;

SELECT stId, SUBSTR(name,1,2) FROM StudentT;
-- 숫자 뿐 아니라 문자열도 가공된 결과를 만들 수 있다.

SELECT stId, LENGTH(name) FROM StudentT;
-- 문자열 길이. UTF-8 에선 한글 한글자 3글자 취급

SELECT stId, REVERSE(name) FROM StudentT;

SELECT stId, CONCAT(name,'***') FROM StudentT;
-- 문자열 이어붙이기

SELECT CONCAT( name, addr ) FROM StudentT;

SELECT CONCAT( name, ":", addr ) FROM StudentT;

Q. 테이블 설계할때 성과 이름을 나누는게 나을까요?
   성과 이름을 합치는게 나을까요??
   
   만일 성이나 이름만 따로 검색하는 일이 많다면?? - 나눔
   성과 이름을 같이 검색하는 경우가 대부분이라면?? - 합치는 것도 괜찮음
   
   남희석 , 남궁석 -- 남이 성인지 남궁이 성인지 알 수가 없다.
		이런 경우 성씨만 따로 모아서 검색하기가 불가능하다.
		
		따로 떨어진 두개를 합치는 건 굉장히 쉬운 작업이기에
		나누는게 여러모로 바람직 할 수 있다 -- 정답은 아님!!!
		
		합친거 나누기는 어렵고, 나눈거 합치기는 쉽다.
		

Q. 역삼동에 사는 학생들의 국어 성적은???		

	역삼동에 - StudentT
	국어성적 - ScoreT
	
	
	역삼동에 사는 학생
SELECT stId FROM StudentT WHERE addr LIKE '%역삼%';

10101 10103

SELECT * FROM ScoreT WHERE subId = 'KOR1' and stId IN ( 10101 , 10103 )

두 문장을 합쳐서 하나로 만들 수 있다. 

SELECT * FROM ScoreT WHERE subId = 'KOR1' and stId IN ( SELECT stId FROM StudentT WHERE addr LIKE '%역삼%' )

괄호 안의 문장이 동작해서 10101 10103 이 나오고 
  그 결과로 괄호 밖의 문장이 동작한다.
  
"하나의 문장이 동작한 결과물을 이용해 다른 문장이 연속해서 동작하는
 형태의 문장을 서브쿼리라고 한다" -- 괄호 안이 먼저 동작한다.
 
Q. 길동이라는 이름을 가진 학생들의 수학성적은??

SELECT stId FROM StudentT WHERE name LIKE '%길동';

10101, 10102

SELECT * FROM ScoreT WHERE subId = 'MAT1' AND stId IN ( 10101, 10102 );

SELECT * FROM ScoreT WHERE subId = 'MAT1' AND stId IN ( SELECT stId FROM StudentT WHERE name LIKE '%길동' ); 
  
"서브쿼리에서 여러 검색 결과를 이용할 때의 비교는 IN / NOT IN 을 쓴다."  
"유일한 검색결과를 이용할때는 = 을 쓴다."
  
SELECT COUNT(*) FROM StudentT;  
SELECT COUNT(*) FROM SubjectT;  
	-- 레코드의 갯수를 세고 있다. 
	
AGGREGATE FUNCTIONS -- 총 5개가 있다.
COUNT MIN MAX AVG SUM : 통계 처리되어 유일한 경과를 보여준다.

SELECT * FROM SubjectT;

SELECT MIN(gajung) FROM SubjectT;
SELECT MAX(gajung) FROM SubjectT;
SELECT SUM(gajung) FROM SubjectT;
SELECT AVG(gajung) FROM SubjectT;

-- 수학 평균

SELECT score FROM ScoreT WHERE subId = 'MAT1';
SELECT AVG(score) FROM ScoreT WHERE subId = 'MAT1';

COUNT MIN MAX AVG SUM - 결과가 딱 하나만 존재할 수 밖에 없다.

Q. 수학에서 평균 이하의 점수를 받은 사람은??

SELECT AVG(score) FROM ScoreT WHERE subId = 'MAT1';

76.6667

SELECT * FROM ScoreT WHERE subId = 'MAT1' AND score <= ( 76.6667 );

SELECT * FROM ScoreT WHERE subId = 'MAT1' AND score <= ( SELECT AVG(score) FROM ScoreT WHERE subId = 'MAT1' );

"유일한 결과와 비교할때는 등호 부등호를 이용하여 비교한다."

Q. 국어에서 최고점수를 받은 사람은??

10102 고길동

"설계를 이해하고, E-R 다이어그램을 볼 줄 알면, 그것을 바탕으로 굉장히 다양한 검색을 만들어 낼 수 있게 된다."


Q. 3학점짜리 과목들의 평균점수는?
72.5 

Q. 한남동 사는 학생들의 평균점수는??
70

Q. 수학에서 최저점 받은 학생들이 사는 동네는??

SELECT score FROM ScoreT WHERE subId = 'MAT1';

SELECT MIN(score) FROM ScoreT WHERE subId = 'MAT1';

SELECT stId FROM ScoreT WHERE subId = 'MAT1' AND score = (60);

SELECT stId FROM ScoreT WHERE subId = 'MAT1' AND score = (
SELECT MIN(score) FROM ScoreT WHERE subId = 'MAT1' );

SELECT addr FROM StudentT WHERE stId IN ( 10106 );

SELECT addr FROM StudentT WHERE stId IN ( SELECT stId FROM ScoreT WHERE subId = 'MAT1' AND score = (
SELECT MIN(score) FROM ScoreT WHERE subId = 'MAT1' ) );