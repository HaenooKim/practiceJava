/*
쓰레드 생성하는 두번째 방법

Runnable을 생각하지 않고 Thread를 상속하여 run()을 오버라이딩 해주고
start()를 호출하면 os로 부터 가상의 분신(쓰레드)이 할당되어서 run()을 동작시킨다.

*/

class kim extends Thread {
	public void run() {
		System.out.println("HelloWorld");
	}
}


public class Test205 {
	public static void main(String[] args) {
		Thread t = new kim();
		t.start();
	}
}

/*
	쓰레드는 물리적인 cpu를 소프트웨어적 분신을 만드는 개념과 같다.
	이들은 독자적으로 구동되며 (동시 실행가능) 메모리를 공유한다.
	
	4명으로 나누면 힘이 1/4로 분산된다.
	아니 그러면 왜 나눌까?
	은행에 가서 서비스를 받는다.
	할머니가 와서 서비스를 길게 받는일이 생기면
	여러 쓰레드로 나눠서 동시에 서비스를 제공하는 쪽이 훨씬 유리하다.
	할머니를 한 쓰레드가 전담하는 동안 그 위의 손님은 우회할 수 있기 때문에
	서비스를 제공하는 서버 프로그램에서는 쓰레드 개념이 필수가 된다.
 
	- java의 쓰레드 관련 설계는 정말 탁월하다.
	C언어의 경우 표준으로 쓰레드를 제공하지 않는다. POSIX 쓰레드 같은 별도 라이브러리에 의존하지만
	java의 경우 아예 언어에 빌트인 개념으로 제공되고 있다.
	쓰레드 + 네트웤 + I/O + 예외처리 까지 서버 프로그램에 최적의 환경을 제공함.
 */