Select * from StuentT;
Select * from SubjectT;
Select * from ScoreT;

AGGREGATE FUNCTIONS : COUNT, SUM, AVG, MIN, MAX(암기 필수)
-> 통계처리되고 유일한 결과를 만들어낸다.

Q. 국어성적 최대값을 구하면?
SELECT MAX(SCORE) FROM ScoreT where subId = 'KOR1';

SELECT score, stId FROM ScoreT where subId = 'KOR1';
--이건 가능함

SELECT MAX(SCORE), stId FROM ScoreT where subId = 'KOR1';
SELECT AVG(SCORE), stId FROM ScoreT where subId = 'KOR1';
--하지만 이 경우 AGGREGATE FUNCTIONS은 다른 필드와 같이 SELECT절에서 언급되어서는 안된다.

--------------------------------------------------

GROUP BY - AGGREGATE FUNCTIONS에 대한 기존 관념 수정요망

SELECT AVG(score) from ScoreT group by stId;
--stId에서 같은 데이터를 가진 것들 끼리 묶어서 평균처리를 함.
+------------+
| AVG(score) |
+------------+
|    76.6667 |
|    93.3333 |
|    76.6667 |
|    73.3333 |
|    63.3333 |
|    66.6667 |
+------------+

select * from ScoreT oreder by stId - 학번순으로 정렬 후 보여줌
SELECT AVG(score), stId from ScoreT group by stId;

통계결과도 하나지만 그것에 매칭되는 묶어주는 필드의 값도 하나
"Group by"에서 언급된 필드는 AGGREGATE FUNCTIONS과 같이
SELECT 절에 언급되어질 수 있다.

select round(avg(score)) as avg, stId from ScoreT group by stId;
-반올림

select round(avg(score), 2) as avg, stId from ScoreT group by stId;
-- 소수점 두번째 자리에서 반올림 함. (2가 없어도 된다.)

select round(avg(score), -1) as avg, stId from ScoreT group by stId;
-- 1자리에서 반올림

select 결과물이 마치 테이블처럼 보여지는데, 이걸 TABLE처럼 사용할 수도 있지 않을까?

SELECT * FROM (select round(avg(score), -1) as avg, stId from ScoreT group by stId);
--이건 ORACLE에서는 된다. select결과를 하나의 테이블처럼 여기고 사용가능하다. 이를 inline view라고 한다.

1. Select 결과를 써서 view를 만든다.
create view Avg_v as 
select round(avg(score), -1) as avg, stId from ScoreT group by stId;
 
2 테이블처럼 쓴다.
s from Avg_v;
 
-테이블이 생긴건 아니고 복잡한 select 문장을 view로 만들어서 쓰니 편하다.
 
Q. UPDATE Avg_V SET avg = 100.0;
 -- 뷰를 이용해서 update, delete, insert는 하지마라.
 
view의 목적은 복잡한 select문을 편하게 쓰기 위한 객체이므로 테이블처럼 이용하지말것.
----------------------------------------------------------

SELECT * FROM (select round(avg(score), -1) as avg, stId from ScoreT group by stId) abcd;
--inline view도 mariadb에서 허용되기 시작함. 단 alias 를 줘야 동작한다.

----------------------------------------------------------
"임시테이블 -- 잠시 써먹는 용도로 쓰는 테이블"
데이터베이스 도사들은 이걸 기가 막히게 잘 쓴다.

DB의 동작효율을 극적으로 향상시키는 마법의 도구.

CREATE TABLE avg_T as
select round(avg(score), 2) as avg, stId from ScoreT group by stId;

select * from avg_T;

-> view가 테이블을 볼 수 있는 창이라고 한다면 이건 실제로 테이블 생성 & 데이터 입력까지 한 셈


ScoreT의 score데이터를 0으로 날린 다음 결과를 확인해보자.
Update ScoreT set score = 0; 

select * from Avg_V; --> score가 0으로 바뀜
그룹 묶고 통계처리가 일어난다. 원본이 삭제되면 뷰를 통해 그 결과는 바로 반영된다.


select * from avg_T; --> 0으로 바뀌지 않고 이전데이터 그대로 갖고있음.
이건 그룹묶고 통계처리하는 것이 일어나지 않음
원본 삭제해도 그대로 유지

속도문제만 따지면 임시테이블이 훨씬 빠르다. 단 데이터의 변화를 즉시 반영치못하는 단점은 있다.

-------------------------------------------------
임시테이블을 이용해서 임시테이블을 만드는 경우도 흔하다.

select avg, stId from avg_T;
select avg, stId, 100 as rank from avg_T;

| avg  | stId  | rank |
+------+-------+------+
|   80 | 10101 |  100 |
|   90 | 10102 |  100 |
|   80 | 10103 |  100 |
|   70 | 10104 |  100 |
|   60 | 10105 |  100 |
|   70 | 10106 |  100 |
+------+-------+------+

--유일한 결과가 나오는 select문은 서브쿼리형태로 select절에서 사용가능-> select 절의 서브쿼리
select avg, stId, (select count(*) from avg_T) as rank from avg_T;

.......
이게 원래 문법 : 테이블명.필드명 형태로 언급한다.
select avg_T.avg, avg_T.stId from avg_T;

테이블 명이 길기 때문에 약어로 줄일 수 있다.
이것을 alias라고 한다.
select A.avg, A.stId from avg_T A;

평균 73.33의 등수는? 이보다 성적 좋은 사람의 명수 + 1하면 된다.

select A.avg, A.stId, (select count(*) from avg_T where avg>= A.avg) as rank from avg_T A;

+-------+-------+------+
| avg   | stId  | rank |
+-------+-------+------+
| 76.67 | 10101 |    3 |  (select count(*) from avg_T where avg>= 76.67)
| 93.33 | 10102 |    1 |  (select count(*) from avg_T where avg>= 93.33)
| 76.67 | 10103 |    3 |  (select count(*) from avg_T where avg>= 76.67)
| 73.33 | 10104 |    4 |  (select count(*) from avg_T where avg>= 73.33)
| 63.33 | 10105 |    6 |  (select count(*) from avg_T where avg>= 63.33)
| 66.67 | 10106 |    5 |  (select count(*) from avg_T where avg>= 66.67)
+-------+-------+------+  

전교생이 3000명인 학교의 평균 & 등수를 구하면?
한번 쿼리에 밑에서는 3000번의 서브쿼리가 돌아간다 & group by - avg포함.
헌데 이런 결과를 보는 화면을 3000명이 동시에 접속?? 밑에서는 300만건의 조회가 동작
이러면 db가 뻗어버림

select 절의 서브쿼리는 굉장히 강력한 정보를 생산할 수 있지만
반면에 엄청난 양의 오버헤드를 발생할 수 있다. 해서 임시테이블을 적극활용하여 오버헤드를 줄인다.

create table Rank_T as
select A.avg, A.stId, (select count(*) from avg_T where avg>= A.avg) as rank from avg_T A;

select * from Rank_T; -> 오버헤드가 거의 없다
별거 아니게 보여도 오버헤드를 극적으로 줄여준다.

.......................

select sqrt(100); --루트 100

select pow(3, 2); 3의 2제곱

Q. 각 과목별로 평균을 구하고 그것의 표준편차를 구하는데 가능한 대로 임시테이블을 쓰는 방향으로 해보세요
select subId, avg(score) from ScoreT group by subId;

CREATE TABLE abcd_T AS
select subId, avg(score) as avg from ScoreT group by subId;

SELECT * FROM abcd_T;

CREATE TABLE bcde_T as
select Avg(avg) as avg2 From abcd_T; ->평균의 평균을 구함
+-------------+
| avg2        |
+-------------+
| 75.00000000 |
+-------------+

select avg-(75) from abcd_T;

+----------+
| avg-(75) |
+----------+
|   5.0000 |
|  -6.6667 |
|   1.6667 |
+----------+

select pow(avg-(75), 2) from abcd_T;

+--------------------+
| pow(avg-(75), 2)   |
+--------------------+
|                 25 |
| 44.444888889999994 |
| 2.7778888900000003 |
+--------------------+


select SUM(pow(avg-(75), 2)) from abcd_T;
select SUM(pow(avg-(75), 2)) / (2) from abcd_T;
select SUM(pow(avg-(75), 2)) / (2) from abcd_T;
select SUM(pow(avg-(SELECT avg2 from bcde_T), 2)) / (2) from abcd_T;
select SUM(pow(avg-(SELECT avg2 from bcde_T), 2)) / (select count(*)-1 from abcd_T) as stdev from abcd_T;
select SUM(pow(avg-(SELECT avg2 from bcde_T), 2)) / (select count(*)-1 from abcd_T) from abcd_T;
create table cedf_T AS


.....................................
서브쿼리는 WHERE 절에서 쓰는 것, SELECT 절에서 쓰는 것, 
FROM 절에서 쓰는 것 등이 있다.

SELECT AVG(score), stdId, from ScoreT group by stdId;

SELECT 결과를 마치 하나의 테이블처럼 이용하는 서브쿼리


SELECT * FROM(SELECT AVG(score) as avg, stId from ScoreT group by stId) alias;
SELECT * FROM(SELECT AVG(score) as avg, stId from ScoreT group by stId) alias where alias.avg>75.0;


아래의 문장은 안된다.
select avg(score), stId from ScoreT where avg(score) > 75 group by stId;
avg가 동작하여 통계처리를 하려면 이건 select 이전에 동작할까 아니면 select 이후에 동작할까?
통계처리를 하려면 먼저 select를 해야한다.
where는 select될때 같이 동작한다.
where조건으로 레코드를 거르는 건 통계처리 이전이다.
select & where -> 묶어서 통계처리 -> AVG(score)
"앞으로 한참 뒤에 나올 데이터를 가지고 레코드를 제한?"
- 이건 불가능한 일이다.

HAVING은 통계처리 이후에 동작하여 AGGREGATE FUNCTION의 결과를 제한할 수 있다.
select avg(score), stId from ScoreT group by stId HAVING AVG(score) > 75;


Select & where > 묶어서 > 통계처리(AVG) > HAVING
순서대로 동작하니까 AGGREGATE FUNCTION의 결과를 제한할 수 있다.
(위처럼 서브쿼리도 가능하지만 HAVING을 이용한 방법도 가능.)
..................................

INNER JOIN - 제일 많이 쓰이는 JOIN

SLELECT * FROM SubjectT A, ScoreT B;

SELECT * from SubjectT A, ScoreT B where A.subId = B.subId;
pk - fk 사이에서 공통데이터를 가지고 짜매어 주었다.

select * from StudentT A, ScoreT B where A.stId = B.stId;

Q. 김씨 성으 ㄹ가진 학생들의 국어성적은?
select * from StudentT A, ScoreT B where A.stId = B.stId 
AND name LIKE '김%' AND subId = 'KOR1';

Q. 학생별 3학점 짜리 과목의 성적은?
 select * from SubjectT A, ScoreT B where A.subId=B.subId;
 select * from SubjectT A, ScoreT B where A.subId=B.subId
 AND A.gajung = 3 order by B.stId;

 select B.stId, B.subId, B.score from SubjectT A, ScoreT B where A.subId=B.subId
 AND A.gajung = 3 order by B.stId;


Q. JOIN과 GROUP BY를 이용해서 푼다.
3학점 짜리 과목의 학생별 평균점수를 구하고
select * from SubjectT A, ScoreT B where A.subId = B.subId;
select avg(score), stId from SubjectT A, ScoreT B where A.subId = B.subId and A.gajung=3 group by stId


평균 70점 이하의 학생을 출력해 보세요
(SUB쿼리 쓰지말것)

select avg(score), stId from SubjectT A, ScoreT B where A.subId = B.subId and A.gajung=3 group by stId having avg(score)<=70;

+------------+-------+
| avg(score) | stId  |
+------------+-------+
|    70.0000 | 10103 |
|    65.0000 | 10105 |
|    60.0000 | 10106 |
+------------+-------+


select * from
(select avg(score), stId from SubjectT A, ScoreT B where A.subId = B.subId and A.gajung=3 group by stId having avg(score)<=70)
A, StudentT B;

+------------+-------+-------+-----------+-----------+
| avg(score) | stId  | stId  | name      | addr      |
+------------+-------+-------+-----------+-----------+
|    70.0000 | 10103 | 10101 | 홍길동    | 역삼동    |
|    65.0000 | 10105 | 10101 | 홍길동    | 역삼동    |
|    60.0000 | 10106 | 10101 | 홍길동    | 역삼동    |
|    70.0000 | 10103 | 10102 | 고길동    | 개포동    |
|    65.0000 | 10105 | 10102 | 고길동    | 개포동    |
|    60.0000 | 10106 | 10102 | 고길동    | 개포동    |
|    70.0000 | 10103 | 10103 | 이기자    | 역삼동    |
|    65.0000 | 10105 | 10103 | 이기자    | 역삼동    |
|    60.0000 | 10106 | 10103 | 이기자    | 역삼동    |
|    70.0000 | 10103 | 10104 | 박기자    | 한남동    |
|    65.0000 | 10105 | 10104 | 박기자    | 한남동    |
|    60.0000 | 10106 | 10104 | 박기자    | 한남동    |
|    70.0000 | 10103 | 10105 | 김영삼    | 홍제동    |
|    65.0000 | 10105 | 10105 | 김영삼    | 홍제동    |
|    60.0000 | 10106 | 10105 | 김영삼    | 홍제동    |
|    70.0000 | 10103 | 10106 | 김대중    | 한남동    |
|    65.0000 | 10105 | 10106 | 김대중    | 한남동    |
|    60.0000 | 10106 | 10106 | 김대중    | 한남동    |
+------------+-------+-------+-----------+-----------+



select * from
(select avg(score), stId from SubjectT A, ScoreT B where A.subId = B.subId and A.gajung=3 group by stId having avg(score)<=70)
A, StudentT B where B.stId = A.stId;
+------------+-------+-------+-----------+-----------+
| avg(score) | stId  | stId  | name      | addr      |
+------------+-------+-------+-----------+-----------+
|    70.0000 | 10103 | 10103 | 이기자    | 역삼동   	 |
|    65.0000 | 10105 | 10105 | 김영삼    | 홍제동    	 |
|    60.0000 | 10106 | 10106 | 김대중    | 한남동    	 |
+------------+-------+-------+-----------+-----------+


 select * from Score2T;
+-------+-----------+-----------+------+------+------+------+------+------+
| stId  | name      | addr      | kor  | gz_k | eng  | gz_e | mat  | gz_m |
+-------+-----------+-----------+------+------+------+------+------+------+
| 10101 | 홍길동    | 역삼동    |   60 |    3 |   80 |    2 |   90 |    3 |
| 10102 | 고길동    | 개포동    |   90 |    3 |   90 |    2 |  100 |    3 |
| 10103 | 이기자    | 역삼동    |   70 |    3 |   90 |    2 |   70 |    3 |
| 10104 | 박기자    | 한남동    |   80 |    3 |   70 |    2 |   70 |    3 |
| 10105 | 김영삼    | 홍제동    |   50 |    3 |   60 |    2 |   80 |    3 |
| 10106 | 김대중    | 한남동    |   60 |    3 |   80 |    2 |   60 |    3 |
+-------+-----------+-----------+------+------+------+------+------+------+

Q. 학생별 평균 성적은?

SELECT stId, (kor+eng+mat)/3 FROM Score2T;
--GROUP BY 한쪽과 비교하면 성능은?? 이 쪽이 최소 10배 이상 빠르다.
더 이상의 과목추가가 절대 없다는 전제가 있으면 엄청 잘한 설계일 수 있다.

Q. 과목별로 가중치를 곱하여 산출된 학점당 평균 점수를 구해보자.
SELECT ((kor * gz_k + eng * gz_e + mat * gz_m) / (gz_k + gz_e + gz_m)) as '평점'
FROM Score2T;

...........................................

select * from SubjectT A, ScoreT B where A.subId = B.subId;

select A.gajung * B.score from SubjectT A, ScoreT B where A.subId = B.subId;
select A.gajung * B.score, A.gajung, B.stId from SubjectT A, ScoreT B where A.subId = B.subId;

select sum(A.gajung * B.score), sum(A.gajung), B.stId from SubjectT A, ScoreT B where A.subId = B.subId group by B.stId;

select sum(A.gajung * B.score) / sum(A.gajung) as '평점',.stId from SubjectT A, ScoreT B where A.subId = B.subId group by B.stId;
+---------+-------+
| 평점    | stId  |
+---------+-------+
| 76.2500 | 10101 |
| 92.5000 | 10102 |
| 75.0000 | 10103 |
| 73.7500 | 10104 |
| 63.7500 | 10105 |
| 65.0000 | 10106 |
+---------+-------+

잘 분리된 설계도 물론 같은 결과를 만들어 낼 수도 있지만
동작속도 면에서는 하나에 다 때려넣은 Score2T를 당할 수 는 없다.

잘 분리된 설계를 추구하되, 속도를 감안해서 약간의 때려넣기 설계 사상을 담는
형태로 구현하는데 적당히 잘 하는 것!!

분리된 설계를 추구하되, JOIN을 적게 하는 방향으로 설계한다.
JOIN의 속도를 빠르게 하는 설계를 추구한다.

테이블 설계가 전체 성능에 미치는 영향이 대략 4~5배 정도 프로그래밍의 그것보다 크다.
크면 10배 이상 차이난다.

................................
Score2T의 모습은 정형적인 비정규화된 설계로 볼 수 있다.

제 1 정규화 : 반복되는 필드를 정리해야 한다.

일반적으로 테이블은 레코드가 늘어나는 형태 즉 세로로 늘어나는 게 정상인데
이게 가로로 늘어나는 설계는 치명적이다.


create table Score3T (
	stId INT NOT NULL,
	subId VARCHAR(10) NOT NULL,
	score INT NOT NULL
);

insert into Score3T
select stId, 'KOR1', kor From Score2T;

insert into Score3T
select stId, 'ENG', eng From Score2T;

insert into Score3T
select stId, 'MAT', mat From Score2T;

-> 기존 테이블에서 다른테이블로 데이터를 옮길때 많이 쓴다.

select * from Score3T;

ALTER TABLE Score2T DROP kor;
ALTER TABLE Score2T DROP eng;
ALTER TABLE Score2T DROP mat;

SELECT * FROM Score2T;
+-------+-----------+-----------+------+------+------+
| stId  | name      | addr      | gz_k | gz_e | gz_m |
+-------+-----------+-----------+------+------+------+
| 10101 | 홍길동    | 역삼동    |    3 |    2 |    3 |
| 10102 | 고길동    | 개포동    |    3 |    2 |    3 |
| 10103 | 이기자    | 역삼동    |    3 |    2 |    3 |
| 10104 | 박기자    | 한남동    |    3 |    2 |    3 |
| 10105 | 김영삼    | 홍제동    |    3 |    2 |    3 |
| 10106 | 김대중    | 한남동    |    3 |    2 |    3 |
+-------+-----------+-----------+------+------+------+



제 3 정규화 ?? pk에 의존되지 않은 필드는 분리시켜라
gz_k, gz_e, gz_m 이걸 Score2T로 부터 분리시키는 작업 필요.

CREATE TABLE gazung_T (
	kor INT,
	eng INT,
	mat INT
);

INSERT INTO gazung_T SELECT gz_k, gz_e, gz_m FROM Score2T;

select gz_k, gz_e, gz_m from Score2T;

ALTER TABLE Score2T DROP gz_k;
ALTER TABLE Score2T DROP gz_e;
ALTER TABLE Score2T DROP gz_m;

제 2 정규화 : 중복되어 나타나는 레코드를 정리하라
select * from gazung_T; 

+------+------+------+
| kor  | eng  | mat  |
+------+------+------+
|    3 |    2 |    3 |
|    3 |    2 |    3 |
|    3 |    2 |    3 |
|    3 |    2 |    3 |
|    3 |    2 |    3 |
|    3 |    2 |    3 |
+------+------+------+
중복되는 것을 볼 수 있다.

select distinct * from gazung_T;
-- distinct는 레코드가 중복되어 나타나는 경우 그것을 하나로 보여준다.

create table Subject3T (
	subId VARCHAR(10) NOT NULL,
	name VARCHAR(10) NOT NULL,
	gajung INT NOT NULL
);

SELECT distinct kor as gajung from gazung_T
UNION ALL
SELECT distinct eng as gajung from gazung_T
UNION ALL
SELECT distinct mat as gajung from gazung_T;

UNION - 두 결과를 합친다. (합집합)
UNION ALL - 동일 형태의 결과 두개를 합쳐서 출력한다.

INSERT INTO Subject3T
select distinct 'KOR1', '국어1', kor as gazung From gazung_T
UNION ALL
select distinct 'ENG', '영어1', eng, as gazung from gazung_T
UNION ALL
select distinct 'MAT1', '수학1', mat as gazung from gazung_T;
